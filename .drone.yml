# @link https://docs.drone.io/
# @link https://github.com/khs1994-docker/ci
#
# 项目构建设置中 Repository Hooks 全部勾选
#

# workspace:
#   base: /app
#   path: .

# kind: secret
# name: username
# data: hl3v+FODjduX0UpXBHgYzPzVTppQblg51CVgCbgDk4U=

kind: pipeline
name: default

# type: kubernetes
# type: docker

platform:
  os: linux
  arch: amd64
  # arm64

clone:
  depth: 50

steps:
  # install dep
  - name: install
    # image: composer:2.0.14
    image: khs1994/php:8.0.6-composer-alpine
    commands:
      - pwd
      - composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/
      - composer install -q --ignore-platform-reqs
      # - composer update -q --ignore-platform-reqs
    volumes:
    - name: cache
      path: /tmp

  # test script
  - name: script
    image: khs1994/php:8.0.6-fpm-alpine
    # pull: always
    # detach: true
    # privileged: true
    commands:
      - pwd
      - mv $${PHP_INI_DIR}/conf.d/docker-php-ext-xdebug.ini.default $${PHP_INI_DIR}/conf.d/docker-php-ext-xdebug.ini
      # 服务初始化需要时间，这里延迟执行
      - sleep 20
      - vendor/bin/phpunit --coverage-clover=coverage.xml
    # volumes:
      # - /Users/khs1994/khs1994/khs1994-lnmp/tmp/cache:/tmp/cache
      # - /data/lnmp/tmp/cache:/tmp/cache
    when:
      # target:
      # - production
      # status:
      # - changed
      # status:
      # - failure
      # - success
      # event:
      # - tag
      # event: [push, tag]
      # event: [push, pull_request, tag]
      event: [push, pull_request, tag]
      # branch:
      # - master
      # branch:
      # - prefix/*
      # branch: [master, develop]
      # branch:
      #   include: [ master, release/* ]
      #   exclude: [ release/1.0.0, release/1.1.* ]
      # repo:
      # - octocat/hello-world

  # when tag push, build docker image
  # http://plugins.drone.io/drone-plugins/drone-docker/
  - name: publish_php
    image: plugins/docker
    settings:
      # registry: docker.khs1994.com
      repo: khs1994/php
      tags: 8.0.6-pro-${DRONE_TAG}-alpine
      target: php
      mirror: https://hub-mirror.c.163.com
      # build_args:
      #   - key=value
      # dockerfile: Dockerfile
      # dockerfile: path/to/Dockerfile
      debug: "true"
      launch_debug: "true"
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
    when:
      #
      # 首先在命令行设置好相关变量 DRONE_SERVER DRONE_TOKEN 右上角 Token 有详细的说明
      #
      # 手动在命令行执行以下命令才会执行此步
      #
      # $ drone deploy khs1994-php/example 6 staging
      #
      event: [ tag ]

  - name: publish_nginx
    image: plugins/docker
    settings:
      repo: khs1994/nginx
      tags: 1.17.0-pro-${DRONE_TAG}-alpine
      target: nginx
      mirror: https://hub-mirror.c.163.com
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
    when:
      #
      # 手动在命令行执行以下命令才会执行此步
      #
      # $ drone deploy khs1994-php/example 6 staging
      #
      #
      event: [ tag ]

  #
  # CI/CD 构建生产环境 PHP NGINX 镜像
  #
  - name: publish_php_to_prod
    image: plugins/docker
    settings:
      repo: khs1994/php
      tags: 8.0.6-pro-${DRONE_TAG}-alpine
      target: php
      mirror: https://hub-mirror.c.163.com
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
    when:
      #
      # 手动在命令行执行以下命令才会执行此步
      #
      # $ drone deploy khs1994-php/demo 6 production
      #
      event: [ tag ]

  - name: publish_nginx_to_prod
    image: plugins/docker
    settings:
      # registry: docker.khs1994.com
      repo: khs1994/nginx
      tags: 1.17.0-pro-${DRONE_TAG}-alpine
      target: nginx
      mirror: https://hub-mirror.c.163.com
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
    when:
      #
      # 手动在命令行执行以下命令才会执行此步
      #
      # $ drone deploy khs1994-php/demo 6 production
      #
      #
      event: [ tag ]

  - name: after_success
    image: khs1994/php:8.0.6-composer-alpine
    when:
      status: success
    commands:
      - bash <(curl -s https://codecov.io/bash)
    environment:
      CODECOV_TOKEN:
        from_secret: codecov_token

  - name: after_failure
    image: bash
    when:
      status:
      - failure
    commands:
      - echo "build failure"

  - name: after_changed
    image: bash
    when:
      status:
      - changed
    commands:
      - echo "build changed"

services:
  - name: mysql
    image: mysql:5.7.22
    environment:
      MYSQL_DATABASE: test
      MYSQL_ROOT_PASSWORD: mytest
    # entrypoint: [ "mysqld" ]
    command: [ "--character-set-server=utf8mb4", "--default-authentication-plugin=mysql_native_password" ]

  # - name: postgresql
  #   image: postgres:12.0-alpine
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_DB=test

  - name: redis
    image: redis:6.2.3-alpine

  # - name: mongodb
  #   image: mongo:4.1.0
  #   command: [ --smallfiles ]

volumes:
- name: cache
  host:
    path: /tmp

# matrix:
#   COMPOSER_VERSION:
#     - 2.0.14
#   PHP_VERSION:
#     - 8.0.6
#     - 7.4.19
#     - 7.3.28
#     - 7.2.34
#     # - 7.1.33
#     # - 7.0.33
#     # - 5.6.40
#   NGINX_VERSION:
#     - 1.17.0
#   REDIS_VERSION:
#     - 6.2.3
#   MYSQL_VERSION:
#     # - 8.0.25
#     - 5.7.22
#   MONGODB_VERSION:
#     - 4.1.0
#   POSTGRESQL_VERSION:
#     - 12.0-alpine

# matrix:
#   include:
#     - PHP_VERSION=7.2.34
#       REDIS_VERSION=6.2.3
#     - PHP_VERSION=7.1.33
#       REDIS_VERSION=6.2.3

# trigger:
#   branch:
#   - master
#     include: [ master, dev, feature/* ]
#     exclude: [ release/1.0.0, release/1.1.* ]
#   event:
#   - push
#   - pull_request
#   - tag
#   - promote
#   - rollback
#     exclude:
#     - pull_request
#   ref:
#   - refs/heads/feature-*
#   - refs/tags/v1.*
